generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  phone         String?
  address       String?
  is_admin      Boolean            @default(false)
  image         String?
  accounts      Account[]
  cart          Cart?
  order         Order[]
  answers       ProductAnswers[]
  questions     ProductQuestions[]
  reviews       Review[]
  sessions      Session[]
  wishlist      Wishlist?
}

model ProductQuestions {
  id        Int             @id @default(autoincrement())
  userId    String
  content   String
  date      DateTime        @default(now())
  productId String
  answer    ProductAnswers?
  product   Product         @relation(fields: [productId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
}

model ProductAnswers {
  id         Int              @id @default(autoincrement())
  content    String
  date       DateTime         @default(now())
  userId     String
  questionId Int              @unique
  question   ProductQuestions @relation(fields: [questionId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime @default(now())
  score     Int
  content   String
  productId String
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        String    @id @default(cuid())
  userID    String    @unique
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userID], references: [id])
  products  Product[] @relation("ProductToWishlist")
}

model Refund {
  id      String   @id @default(cuid())
  date    DateTime @default(now())
  orderID String   @unique
  order   Order    @relation(fields: [orderID], references: [id])
}

model Order {
  id             String           @id @default(cuid())
  date           DateTime         @default(now())
  userID         String
  total          Float
  discount       Float?
  payment_status PaymentStatus    @default(PENDING)
  user           User             @relation(fields: [userID], references: [id])
  products       ProductOnOrder[]
  refund         Refund?
}

model Cart {
  id        String    @id @default(cuid())
  userID    String    @unique
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userID], references: [id])
  products  Product[] @relation("CartToProduct")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            String             @id @default(cuid())
  name          String
  total_sales   Int                @default(0)
  stars         Float              @default(0)
  current_price Float?
  price         Float
  brand         String
  color         Boolean            @default(false)
  size          Boolean            @default(true)
  stock         Int                @default(0)
  views         Int                @default(0)
  category      String
  gender        String
  product_type  String
  sub_title     String
  images        String[]
  orders        ProductOnOrder[]
  questions     ProductQuestions[]
  reviews       Review[]
  carts         Cart[]             @relation("CartToProduct")
  wishlists     Wishlist[]         @relation("ProductToWishlist")
}

model ProductOnOrder {
  productId String
  orderId   String
  quantity  Int
  size      String @default("M")
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, orderId])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILURE
}
