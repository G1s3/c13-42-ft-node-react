// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    image         String?
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    phone         String?
    address       String?
    is_admin      Boolean   @default(false)
    wishlistId    Wishlist?
    cart          Cart?
    order         Order[]
}

model Review{
    id           Int        @id
    user         String
    title        String
    text         String
    date         DateTime
    productID    String     @unique
    product      Product    @relation(fields: [productID], references: [id])
    score        Int
}

model Wishlist{
    id            String    @id @default(cuid())
    userID        String    @unique
    user          User      @relation(fields: [userID], references: [id])
    products      Product[]
    updatedAt     DateTime  @updatedAt
}

model Refund{
    id            String    @id @default(cuid())
    date          DateTime  @default(now())
    orderID       String    @unique
    order         Order     @relation(fields: [orderID], references: [id])
}

model Order{
    id            String    @id @default(cuid())
    refund        Refund?
    date          DateTime  @default(now())
    userID        String    @unique
    user          User      @relation(fields: [userID], references: [id])
    total         Float
    discount      Float?
    products      Product[]
}
model Cart{
    id            String    @id @default(cuid())
    products      Product[]
    userID        String    @unique
    user          User      @relation(fields: [userID], references: [id])
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Product {
    id            String    @id @default(cuid())
    name          String 
    image         String[]
    description   String
    total_sales   Int       @default(0)
    stars         Float     @default(0)
    current_price Float?
    price         Float
    type          String
    brand         String
    color         Boolean
    size          Boolean
    stock         Int       @default(0)
    views         Int       @default(0)
    wishlists     Wishlist[]
    carts         Cart[]
    orders        Order[]
    review        Review[]
}
